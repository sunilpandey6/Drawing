/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @generated by `buck2 run //arvr/projects/mixedreality/libraries/mrutilitykit:build_and_deploy unity`

using System;
using System.Runtime.InteropServices;
using UnityEngine;

namespace Meta.XR.MRUtilityKit
{
    internal static unsafe class MRUKNativeFuncs
    {
        public enum MrukSceneModel
        {
            V2FallbackV1 = 0,
            V1 = 1,
            V2 = 2,
        };

        public enum MrukLogLevel
        {
            Debug = 0,
            Info = 1,
            Warn = 2,
            Error = 3,
        };

        public enum MrukResult
        {
            Success = 0,
            ErrorInvalidArgs = 1,
            ErrorUnknown = 2,
            ErrorInternal = 3,
            ErrorDiscoveryOngoing = 4,
            ErrorInvalidJson = 5,
            ErrorNoRoomsFound = 6,
            ErrorInsufficientResources = 7,
            ErrorStorageAtCapacity = 8,
            ErrorInsufficientView = 9,
            ErrorPermissionInsufficient = 10,
            ErrorRateLimited = 11,
            ErrorTooDark = 12,
            ErrorTooBright = 13,
        };

        public enum MrukSurfaceType
        {
            None = 0,
            Plane = 1,
            Volume = 2,
            Mesh = 4,
            All = 7,
        };

        public delegate void LogPrinter(MrukLogLevel logLevel, string message);

        public delegate void MrukOnPreRoomAnchorAdded(ref MrukRoomAnchor roomAnchor, IntPtr userContext);

        public delegate void MrukOnRoomAnchorAdded(ref MrukRoomAnchor roomAnchor, IntPtr userContext);

        public delegate void MrukOnRoomAnchorUpdated(ref MrukRoomAnchor roomAnchor, ref MrukUuid oldRoomAnchorUuid, IntPtr userContext);

        public delegate void MrukOnRoomAnchorRemoved(ref MrukRoomAnchor roomAnchor, IntPtr userContext);

        public delegate void MrukOnSceneAnchorAdded(ref MrukSceneAnchor sceneAnchor, IntPtr userContext);

        public delegate void MrukOnSceneAnchorUpdated(ref MrukSceneAnchor sceneAnchor, IntPtr userContext);

        public delegate void MrukOnSceneAnchorRemoved(ref MrukSceneAnchor sceneAnchor, IntPtr userContext);

        public delegate void MrukOnDiscoveryFinished(MrukResult result, IntPtr userContext);

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukPosef
        {
            public Vector3 position;
            public Quaternion rotation;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukPolygon2f
        {
            public Vector2[] points;
            public uint numPoints;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukMesh2f
        {
            public Vector2* vertices;
            public uint numVertices;
            public uint* indices;
            public uint numIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukMesh3f
        {
            public Vector3* vertices;
            public uint numVertices;
            public uint* indices;
            public uint numIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukUuid
        {
            public ulong part1;
            public ulong part2;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukVolume
        {
            public Vector3 min;
            public Vector3 max;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukPlane
        {
            public float x;
            public float y;
            public float width;
            public float height;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukSceneAnchor
        {
            public ulong space;
            public MrukUuid uuid;
            public MrukUuid roomUuid;
            public MrukPosef pose;
            public MrukVolume volume;
            public MrukPlane plane;
            public char** semanticLabels;
            public Vector2* planeBoundary;
            public uint* globalMeshIndices;
            public Vector3* globalMeshPositions;
            public uint semanticLabelsCount;
            public uint planeBoundaryCount;
            public uint globalMeshIndicesCount;
            public uint globalMeshPositionsCount;
            [MarshalAs(UnmanagedType.U1)] public bool hasVolume;
            [MarshalAs(UnmanagedType.U1)] public bool hasPlane;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukRoomAnchor
        {
            public ulong space;
            public MrukUuid uuid;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukEventListener
        {
            public MrukOnPreRoomAnchorAdded onPreRoomAnchorAdded;
            public MrukOnRoomAnchorAdded onRoomAnchorAdded;
            public MrukOnRoomAnchorUpdated onRoomAnchorUpdated;
            public MrukOnRoomAnchorRemoved onRoomAnchorRemoved;
            public MrukOnSceneAnchorAdded onSceneAnchorAdded;
            public MrukOnSceneAnchorUpdated onSceneAnchorUpdated;
            public MrukOnSceneAnchorRemoved onSceneAnchorRemoved;
            public MrukOnDiscoveryFinished onDiscoveryFinished;
            public IntPtr userContext;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukHit
        {
            public MrukUuid roomAnchorUuid;
            public MrukUuid sceneAnchorUuid;
            public float hitDistance;
            public Vector3 hitPosition;
            public Vector3 hitNormal;
        }

        internal delegate void SetLogPrinterDelegate(LogPrinter printer);

        /**
         * Create the global anchor store with a external OpenXR instance and session.
         * This should only be called once on application startup.
         * Make sure to hook up the ContextOnOpenXrEvent() function as well.
         * If the context is not needed anymore it should be destroyed with ContextDestroy() to free
         * resources.
         */
        internal delegate MrukResult AnchorStoreCreateDelegate(ulong xrInstance, ulong xrSession, IntPtr xrInstanceProcAddrFunc, ulong baseSpace);
        internal delegate MrukResult AnchorStoreCreateWithoutOpenXrDelegate();

        /**
         * Destroy the global anchor store
         * This should only be called once on application shutdown.
         */
        internal delegate void AnchorStoreDestroyDelegate();

        /**
         * If the base space changes after initialization, this function should be called to update the
         * base space.
         */
        internal delegate void AnchorStoreSetBaseSpaceDelegate(ulong baseSpace);

        /**
         * Start anchor discovery in the anchor store
         */
        internal delegate MrukResult AnchorStoreStartDiscoveryDelegate([MarshalAs(UnmanagedType.U1)] bool shouldRemoveMissingRooms, MrukSceneModel sceneModel);

        /**
         * Load the scene from a json string
         */
        internal delegate MrukResult AnchorStoreLoadSceneFromJsonDelegate(string jsonString, [MarshalAs(UnmanagedType.U1)] bool shouldRemoveMissingRooms, MrukSceneModel sceneModel);

        /**
         * Save the scene to a json string.
         * @return The serialized JSON string. This string must be freed with FreeAnchorStoreJson after use!
         */
        internal delegate char* AnchorStoreSaveSceneToJsonDelegate();

        /**
         * Free the json string returned by AnchorStoreSaveSceneToJson.
         * @param[in] jsonString The JSON string to free.
         */
        internal delegate void AnchorStoreFreeJsonDelegate(char* jsonString);

        /**
         * Clear and remove all rooms in the anchor store.
         */
        internal delegate void AnchorStoreClearRoomsDelegate();

        /**
         * Clear and remove the room that matches the given uuid.
         */
        internal delegate void AnchorStoreClearRoomDelegate(MrukUuid roomUuid);

        /**
         * Allows to forward OpenXR events from the engine into the shared library
         */
        internal delegate void AnchorStoreOnOpenXrEventDelegate(IntPtr baseEventHeader);

        /**
         * Needs to be called every tick by the engine.
         */
        internal delegate void AnchorStoreTickDelegate(ulong nextPredictedDisplayTime);
        internal delegate void AnchorStoreRegisterEventListenerDelegate(MrukEventListener listener);

        /**
         * Cast a ray against all anchors in the room and return the first hit.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreRaycastRoomDelegate(MrukUuid roomUuid, Vector3 origin, Vector3 direction, float maxDistance, uint surfaceType, ref MrukHit outHit);

        /**
         * Cast a ray against all anchors in the room and return all hits along the ray.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreRaycastRoomAllDelegate(MrukUuid roomUuid, Vector3 origin, Vector3 direction, float maxDistance, uint surfaceType, ref MrukHit outHits, ref uint outHitsCount);
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreIsDiscoveryRunningDelegate();

        /**
         * Add two vectors together. This is implemented as a test to ensure the native shared
         * library is working correctly.
         *
         * @param[in] a The first vector.
         * @param[in] b The second vector.
         * @return The sum of the two vectors.
         */
        internal delegate Vector3 AddVectorsDelegate(Vector3 a, Vector3 b);

        /**
         * Triangulate a polygon with holes, any winding order works. The first polyline defines the main
         * polygon. Following polylines define holes. This function will allocate memory for the vertices
         * and indices. You *MUST* call FreeMesh() when you are done with it or you will leak memory.
         *
         * @param[in] polygons The polygon to triangulate.
         * @param[in] numPolygons The number of polygons in the array.
         * @return mesh The triangulated mesh.
         */
        internal delegate MrukMesh2f TriangulatePolygonDelegate(MrukPolygon2f[] polygons, uint numPolygons);

        /**
         * Free the memory allocated by TriangulatePolygon.
         *
         * @param[in] mesh The mesh to free.
         */
        internal delegate void FreeMeshDelegate(ref MrukMesh2f mesh);

        /**
         * Compute the mesh segmentation for a given set of vertices, indices and segmentation points.
         * You *MUST* call FreeMeshSegmentation() on the meshSegments array when you are done with it or you
         * will leak memory.
         *
         * @param[in] vertices The mesh vertices.
         * @param[in] numVertices The number of vertices in the mesh.
         * @param[in] indices The mesh indices.
         * @param[in] numIndices The number of indices in the mesh.
         * @param[in] segmentationPoints The points that should be used to calculate the segments.
         * @param[in] numSegmentationPoints The number of segmentation points.
         * @param[in] reservedMin The minimum bounding box for the reserved segment.
         * @param[in] reservedMax The maximum bounding box for the reserved segment.
         * @param[out] meshSegments The resulting segments.
         * @param[out] numSegments The number of segments in the resulting array.
         * @param[out] reservedSegment The segment that is inside the reserved bounding box.
         */
        internal delegate MrukResult ComputeMeshSegmentationDelegate(Vector3[] vertices, uint numVertices, uint[] indices, uint numIndices, Vector3[] segmentationPoints, uint numSegmentationPoints, Vector3 reservedMin, Vector3 reservedMax, out MrukMesh3f* meshSegments, out uint numSegments, out MrukMesh3f reservedSegment);

        /**
         * Free the memory allocated by ComputeMeshSegmentation.
         *
         * @param[in] meshSegments The array of segments to free.
         * @param[in] numSegments The number of segments in the array.
         * @param[in] reservedSegment The reserved segment to free.
         */
        internal delegate void FreeMeshSegmentationDelegate(MrukMesh3f* meshSegments, uint numSegments, ref MrukMesh3f reservedSegment);

        internal static SetLogPrinterDelegate SetLogPrinter;
        internal static AnchorStoreCreateDelegate AnchorStoreCreate;
        internal static AnchorStoreCreateWithoutOpenXrDelegate AnchorStoreCreateWithoutOpenXr;
        internal static AnchorStoreDestroyDelegate AnchorStoreDestroy;
        internal static AnchorStoreSetBaseSpaceDelegate AnchorStoreSetBaseSpace;
        internal static AnchorStoreStartDiscoveryDelegate AnchorStoreStartDiscovery;
        internal static AnchorStoreLoadSceneFromJsonDelegate AnchorStoreLoadSceneFromJson;
        internal static AnchorStoreSaveSceneToJsonDelegate AnchorStoreSaveSceneToJson;
        internal static AnchorStoreFreeJsonDelegate AnchorStoreFreeJson;
        internal static AnchorStoreClearRoomsDelegate AnchorStoreClearRooms;
        internal static AnchorStoreClearRoomDelegate AnchorStoreClearRoom;
        internal static AnchorStoreOnOpenXrEventDelegate AnchorStoreOnOpenXrEvent;
        internal static AnchorStoreTickDelegate AnchorStoreTick;
        internal static AnchorStoreRegisterEventListenerDelegate AnchorStoreRegisterEventListener;
        internal static AnchorStoreRaycastRoomDelegate AnchorStoreRaycastRoom;
        internal static AnchorStoreRaycastRoomAllDelegate AnchorStoreRaycastRoomAll;
        internal static AnchorStoreIsDiscoveryRunningDelegate AnchorStoreIsDiscoveryRunning;
        internal static AddVectorsDelegate AddVectors;
        internal static TriangulatePolygonDelegate TriangulatePolygon;
        internal static FreeMeshDelegate FreeMesh;
        internal static ComputeMeshSegmentationDelegate ComputeMeshSegmentation;
        internal static FreeMeshSegmentationDelegate FreeMeshSegmentation;

        internal static void LoadNativeFunctions()
        {
            SetLogPrinter = MRUKNative.LoadFunction<SetLogPrinterDelegate>("SetLogPrinter");
            AnchorStoreCreate = MRUKNative.LoadFunction<AnchorStoreCreateDelegate>("AnchorStoreCreate");
            AnchorStoreCreateWithoutOpenXr = MRUKNative.LoadFunction<AnchorStoreCreateWithoutOpenXrDelegate>("AnchorStoreCreateWithoutOpenXr");
            AnchorStoreDestroy = MRUKNative.LoadFunction<AnchorStoreDestroyDelegate>("AnchorStoreDestroy");
            AnchorStoreSetBaseSpace = MRUKNative.LoadFunction<AnchorStoreSetBaseSpaceDelegate>("AnchorStoreSetBaseSpace");
            AnchorStoreStartDiscovery = MRUKNative.LoadFunction<AnchorStoreStartDiscoveryDelegate>("AnchorStoreStartDiscovery");
            AnchorStoreLoadSceneFromJson = MRUKNative.LoadFunction<AnchorStoreLoadSceneFromJsonDelegate>("AnchorStoreLoadSceneFromJson");
            AnchorStoreSaveSceneToJson = MRUKNative.LoadFunction<AnchorStoreSaveSceneToJsonDelegate>("AnchorStoreSaveSceneToJson");
            AnchorStoreFreeJson = MRUKNative.LoadFunction<AnchorStoreFreeJsonDelegate>("AnchorStoreFreeJson");
            AnchorStoreClearRooms = MRUKNative.LoadFunction<AnchorStoreClearRoomsDelegate>("AnchorStoreClearRooms");
            AnchorStoreClearRoom = MRUKNative.LoadFunction<AnchorStoreClearRoomDelegate>("AnchorStoreClearRoom");
            AnchorStoreOnOpenXrEvent = MRUKNative.LoadFunction<AnchorStoreOnOpenXrEventDelegate>("AnchorStoreOnOpenXrEvent");
            AnchorStoreTick = MRUKNative.LoadFunction<AnchorStoreTickDelegate>("AnchorStoreTick");
            AnchorStoreRegisterEventListener = MRUKNative.LoadFunction<AnchorStoreRegisterEventListenerDelegate>("AnchorStoreRegisterEventListener");
            AnchorStoreRaycastRoom = MRUKNative.LoadFunction<AnchorStoreRaycastRoomDelegate>("AnchorStoreRaycastRoom");
            AnchorStoreRaycastRoomAll = MRUKNative.LoadFunction<AnchorStoreRaycastRoomAllDelegate>("AnchorStoreRaycastRoomAll");
            AnchorStoreIsDiscoveryRunning = MRUKNative.LoadFunction<AnchorStoreIsDiscoveryRunningDelegate>("AnchorStoreIsDiscoveryRunning");
            AddVectors = MRUKNative.LoadFunction<AddVectorsDelegate>("AddVectors");
            TriangulatePolygon = MRUKNative.LoadFunction<TriangulatePolygonDelegate>("TriangulatePolygon");
            FreeMesh = MRUKNative.LoadFunction<FreeMeshDelegate>("FreeMesh");
            ComputeMeshSegmentation = MRUKNative.LoadFunction<ComputeMeshSegmentationDelegate>("ComputeMeshSegmentation");
            FreeMeshSegmentation = MRUKNative.LoadFunction<FreeMeshSegmentationDelegate>("FreeMeshSegmentation");
        }

        internal static void UnloadNativeFunctions()
        {
            SetLogPrinter = null;
            AnchorStoreCreate = null;
            AnchorStoreCreateWithoutOpenXr = null;
            AnchorStoreDestroy = null;
            AnchorStoreSetBaseSpace = null;
            AnchorStoreStartDiscovery = null;
            AnchorStoreLoadSceneFromJson = null;
            AnchorStoreSaveSceneToJson = null;
            AnchorStoreFreeJson = null;
            AnchorStoreClearRooms = null;
            AnchorStoreClearRoom = null;
            AnchorStoreOnOpenXrEvent = null;
            AnchorStoreTick = null;
            AnchorStoreRegisterEventListener = null;
            AnchorStoreRaycastRoom = null;
            AnchorStoreRaycastRoomAll = null;
            AnchorStoreIsDiscoveryRunning = null;
            AddVectors = null;
            TriangulatePolygon = null;
            FreeMesh = null;
            ComputeMeshSegmentation = null;
            FreeMeshSegmentation = null;
        }

    }
}
